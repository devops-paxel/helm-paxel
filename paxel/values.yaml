# Default values for paxel.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: paxel
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v1.0.0"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

deployment:
  enabled: true
  replicaCount: 1

  # This is for setting Kubernetes Annotations to a deployment.
  # Annotations:
  #   reloader.stakater.com/auto: "true"
  Annotations:
    reloader.stakater.com/auto: "true"

  # This is for setting Kubernetes Annotations to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}

  # This is for setting Kubernetes Labels to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}

  deploymentTimestamp: {}

  #command:              
  #  enabled: true
  #  config:
  #    command:
  #      - nginx
  #    args:
  #      - -g
  #      - daemon off
  command:
    enabled: false
    config: {}
      
  hostAliases:
    enabled: false

  #livenessProbe:    
  #  enabled: true
  #  config:
  #    tcpSocket:
  #      port: http
  #    initialDelaySeconds: 5
  #    periodSeconds: 10
  #readinessProbe:
  #  enabled: true
  #  config:
  #    httpGet:
  #      path: /
  #      port: http
  #    initialDelaySeconds: 15
  #    periodSeconds: 20
  livenessProbe:
    enabled: false
    config: {}
  readinessProbe:
    enabled: false
    config: {}

  #lifecycle:
  #  enabled: true
  #  config:
  #    postStart:
  #      exec:
  #        command:
  #          - /bin/sh
  #          - -c
  #          - echo Container starting...
  #    preStop:
  #      exec:
  #        command:
  #          - /bin/sh
  #          - -c
  #          - |
  #            echo Container stopping...
  #            sleep 5
  lifecycle:
    enabled: true
    config:
      preStop:
        exec:
          command:
            - /bin/sh
            - -c
            - |
              echo Container stopping...
              sleep 10

  #how to add affinity on deployment manifest
  #affinity:
  #  enabled: false
  #  config:
  #    podAntiAffinity:
  #      requiredDuringSchedulingIgnoredDuringExecution:
  #        - labelSelector:
  #            matchExpressions:
  #              - key: app.kubernetes.io/name
  #                operator: In
  #                values:
  #                  - paxel
  #          topologyKey: "kubernetes.io/hostname"
  #    podAntiAffinity:
  #      preferredDuringSchedulingIgnoredDuringExecution:
  #        - weight: 100
  #          podAffinityTerm:
  #            labelSelector:
  #              matchExpressions:
  #                - key: app.kubernetes.io/name
  #                  operator: In
  #                  values:
  #                    - paxel
  #            topologyKey: "kubernetes.io/hostname"
  affinity:
    enabled: false
    config: {}

  #nodeSelector:
  #  enabled: true
  #  config:
  #    service: "paxel"
  nodeSelector: 
    enabled: false
    config: {}

  #tolerations:
  #  enabled: true
  #  config:
  #    - key: "service"
  #      operator: "Equal"
  #      value: "paxel"
  #      effect: "NoSchedule"
  tolerations:
    enabled: false
    config: {}

  #extraPorts:
  #  enabled: true
  #  config: 
  #    - name: prometheus
  #      containerPort: 9100
  #      protocol: TCP
  #    - name: https
  #      containerPort: 443
  #      protocol: TCP
  extraPorts:
    enabled: false
    config: {}

  #resources:
  #  enabled: true
  #  config:
  #    limits:
  #      cpu: 100m
  #      memory: 128Mi
  #    requests:
  #      cpu: 100m
  #      memory: 128Mi
  resources:
    enabled: false
    config: {}

  podSecurityContext: {}
    # fsGroup: 2000
    
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  #initContainers:
  #  enabled: true
  #  image:
  #    repository: nginx
  #    tag: latest
  #  volumeMounts:
  #    - name: shared-data
  #      mountPath: /data
  #    - name: nfs-volume
  #      mountPath: /mnt/nfs
  #    - name: pvc-volume
  #      mountPath: /mnt/pvc
  #  command:
  #    command:
  #      - nginx
  #    args:
  #      - -g
  #      - daemon off
  #  resources:
  #    limits:
  #      cpu: 100m
  #      memory: 128Mi
  #    requests:
  #      cpu: 100m
  #      memory: 128Mi
  initContainers:
    enabled: false
    image:
      repository: nginx
      tag: latest
    volumeMounts: {}
    command: {}
    resources: {}

  #volumes:
  #  enabled: true
  #  config: 
  #    - name: shared-data
  #      emptyDir: {}
  #    - name: nfs-volume
  #      nfs:
  #        server: 10.10.10.45
  #        path: /exports/shared
  #    - name: pvc-volume
  #      persistentVolumeClaim:
  #        claimName: example-pvc
  #    - name: config-volume
  #      configMap:
  #        name: app-config
  #        items:
  #          - key: app.conf
  #            path: app.conf
  #    - name: config-file
  #      configMap:
  #        name: paxel
  #    - name: secret-volume
  #      secret:
  #        secretName: app-secret
  #        items:
  #          - key: db.conf
  #            path: db.conf
  volumes:
    enabled: false
    config: {}

  #volumeMounts:
  #  enabled: true
  #  config:
  #    - name: shared-data
  #      mountPath: /usr/share/nginx/html/data
  #    - name: nfs-volume
  #      mountPath: /mnt/nfs
  #    - name: pvc-volume
  #      mountPath: /mnt/pvc
  #    - name: config-volume
  #      mountPath: /etc/app-config
  #      readOnly: true
  #    - name: config-file
  #      mountPath: /etc/app-config/config.json
  #      readOnly: true
  #    - name: secret-volume
  #      mountPath: /etc/secret
  #      readOnly: true
  volumeMounts:
    enabled: false
    config: {}

  #enVar:
  #  envFrom:
  #    enabled: true
  #    config:
  #      - configMapRef:
  #          name: app-config-env
  #      - secretRef:
  #          name: app-secret-env
  #  env:
  #    enabled: true
  #    config:
  #      - name: ENVIRONMENT
  #        value: "production"
  #      - name: APP_PORT
  #        value: "80"
  enVar:
    envFrom:
      enabled: false
      config: {}
    env:
      enabled: false
      config: {}

bluegreen:
  enabled: false

#for this line you only can enabled 1 type config, configFile or configEnv, you can't enable both
#sample cli
#
# helm template -f values.yaml paxel paxel \
#   --set-file 'configmap.configEnv.file=kodok.env' \
#   --set-file 'configmap.configFile[0].file=config1.json' \
#   --set-file 'configmap.configFile[1].file=config2.json'
#
#configmap:
#  enabled: true
#  name: paxel
#  configFile:
#    - name: config1.json
#      file: ""
#    - name: config2.json
#      file: ""
#  configEnv:
#    file: ""
configmap:
  enabled: false
  name: paxel
  configFile: {}
  configEnv: {}

secret:
  enabled: false
  name: paxel
  file: {}

pdb:
  enabled: false

keda:
  enabled: false

#cronJob:
#  enabled: false
#  config:
#    - name: cron1
#      schedule: "*/5 * * * *"
#      cmd: sleep
#      args: 10s
#      volumeMounts:
#        - name: shared-data
#          mountPath: /usr/share/nginx/html/data
#        - name: config-volume
#          mountPath: /etc/app-config
#          readOnly: true
#    - name: cron2
#      schedule: "*/2 * * * *"
#      cmd: sleep
#      args: 10s
cronJob:
  enabled: false
  config: {} 

Job:
  enabled: false

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  annotations: {}
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

  #extraPorts:
  #  enabled: true
  #  config:
  #    - port: 9100
  #      targetPort: 9100
  #      protocol: TCP
  #      name: prometheus
  extraPorts:
    enabled: false
    config: {}

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt"
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

secondIngress:
  enabled: false
  className: ""
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt"
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
#autoscaling:
#  enabled: true
#  minReplicas: 1
#  maxReplicas: 3
#  behavior:
#    scaleDown:
#      stabilizationWindowSeconds: 30
#    scaleUp:
#      stabilizationWindowSeconds: 0
#  cpu:
#    target:
#      type: Utilization
#      averageUtilization: 70
#  memory:
#    target:
#      type: Utilization
#      averageUtilization: 70
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  behavior: {}
  cpu: {}
  memory: {}


